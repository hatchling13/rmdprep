2019. 06. 04 - 	프로젝트 시작 일자. 새로운 Rust 프로젝트를 생성했지만 기초 지식이 부족하여 추가로 뭘 하지는 않았다.
		개발 시작 이전에 간단하게 설계 문서를 만들고 싶어서 ppt 파일을 만들었다.
2019. 06. 05 - 	프로젝트의 가칭을 rmdprep(Rust + Markdown + PreProcessor)로 정하고 Github에 저장소를 만들었다.
2019. 06. 06 - 	Rust의 문법과 toml의 구조를 흝어보며, toml 파일을 입력받아 deserialize하는 튜토리얼 프로그램을 작성하였다. 저장소에 커밋하진 않았다.
		정적 웹사이트 생성기를 이전에 써봤던 Hugo로 해야 하나, 아니면 언어의 통일성을 위해 Zola로 해야하나 고민해봐야겠다.
		Hugo를 쓸 때의 장점은 이미 사용자가 많다는 점과 충분히 안정되어있다는 점이고, Zola를 쓸 때의 장점은 개발 언어가 통일된다는 점이다.
2019. 06. 07 -	언어의 통일성을 위해 Zola를 우선적으로 지원하기로 결정했다. 생각보다 많은 기능들을 자체적으로 지원하고 있어서 편할 것 같다.
		조금 더 명시적인 설계를 위해, 구현해야할 기능들을 생각해보기로 했다. 생각날 때마다 추가적으로 적어놓아야겠다.
		우선적으로 외부 코드 파일과 그 실행 결과를 문서에 포함시키는 기능을 구현해야한다.
		지속적 통합 서비스인 Travis-CI에 대해서 알아보기 시작했다. 오픈 소스 프로젝트에는 무료라니 얼마나 관대한가.
		생각해보니 가장 중요한 컨텐츠 레이아웃에 대해서 하나도 생각을 안 했었다. 어떤 글들을 쓰고 살지 범주에 대해 고민해봐야겠다.
2019. 06. 19 -	한 달은 지난 줄 알았는데 2주도 안 됐었다. Markdown 구조와 처리 구조를 대강 정리했다.
2019. 06. 20 -	어차피 완벽한 설계란 존재하지 않으니 슬슬 실개발 단계로 들어가야 할 것 같다.
2019. 06. 26 -	SSG마다 Front-matter를 생성하는 건 차후에 생각하기로 했다. 프로그램 전체 구조를 잡고 가야 편할텐데 밑작업 지랄이 좀 심하다.
2019. 10. 26 -	한동안 방치해두던 프로젝트를 다시 보니 병신같은 코드였다. 확장성이 전혀 보이지 않는 코드였기에 처음부터 시작하기로 했다.
		한쪽에 밀어두고 있던 유닛 테스트의 존재도 다시 상기할 겸 기본 틀을 잡아놓았다. 언제나 완성되어서 쓰게 될까?
2019. 10. 29 -	처음 시작부터 이때까지 인자값이 올바르려면 어때야 하는지를 계속 생각하다가 지금 하고 있는 게 일종의 검증 작업임을 깨닫게 되었다.
		그렇게 작업의 속성이 정의되고 나니 허무하게도 라이브러리를 붙여버리면 된다는 결론에 다다랐다. 왜 처음부터 그 생각을 못했을까?
		언어가 가지고 있는 힘이란 참 무서운 것 같다. 괜찮아보이는 라이브러리(https://github.com/Keats/validator)를 발견해서 알아보기로 했다.
2019. 12. 12 -	한 달동안 다른 주제에 몰두해있다가 다시 잡았다. 위에 적은 라이브러리보다 좀 더 의미있어 보이는 걸 발견해서 대강 테스트해봤다.
		(https://github.com/slowtec/semval) 조금 귀찮긴 하겠지만 직접 검증 코드를 쓸 수 있다는 점이 괜찮아보여서 적용하기로 했다.